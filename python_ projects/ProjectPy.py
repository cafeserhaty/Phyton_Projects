# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Project.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit
import matplotlib.pyplot as plt
import statistics
from scipy import stats
import numpy as np
import math
import pandas as pd
import os



class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(630, 403)
        self.Add = QtWidgets.QPushButton(Dialog)
        self.Add.setGeometry(QtCore.QRect(80, 70, 71, 41))
        self.Add.setObjectName("Add")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(30, 40, 47, 13))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(80, 40, 111, 21))
        self.lineEdit.setText("")
        self.lineEdit.setFrame(True)
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(330, 40, 31, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(20, 130, 81, 16))
        self.label_3.setObjectName("label_3")
        self.Remove_Selected = QtWidgets.QPushButton(Dialog)
        self.Remove_Selected.setGeometry(QtCore.QRect(20, 150, 71, 41))
        self.Remove_Selected.setObjectName("Remove_Selected")
        self.Plot = QtWidgets.QPushButton(Dialog)
        self.Plot.setGeometry(QtCore.QRect(370, 40, 91, 31))
        self.Plot.setObjectName("Plot")
        self.Standard_Deviation = QtWidgets.QPushButton(Dialog)
        self.Standard_Deviation.setGeometry(QtCore.QRect(370, 140, 91, 31))
        self.Standard_Deviation.setObjectName("Standard_Deviation")
        self.Histogram = QtWidgets.QPushButton(Dialog)
        self.Histogram.setGeometry(QtCore.QRect(370, 90, 91, 31))
        self.Histogram.setObjectName("Histogram")
        self.Kurtosis = QtWidgets.QPushButton(Dialog)
        self.Kurtosis.setGeometry(QtCore.QRect(370, 240, 91, 31))
        self.Kurtosis.setObjectName("Kurtosis")
        self.Skewness = QtWidgets.QPushButton(Dialog)
        self.Skewness.setGeometry(QtCore.QRect(370, 190, 91, 31))
        self.Skewness.setObjectName("Skewness")
        self.Everything = QtWidgets.QPushButton(Dialog)
        self.Everything.setGeometry(QtCore.QRect(370, 290, 91, 51))
        self.Everything.setObjectName("Everything")
        self.Remove_All = QtWidgets.QPushButton(Dialog)
        self.Remove_All.setGeometry(QtCore.QRect(20, 200, 71, 41))
        self.Remove_All.setObjectName("Remove_All")
        self.listWidget = QtWidgets.QListWidget(Dialog)
        self.listWidget.setGeometry(QtCore.QRect(100, 130, 71, 241))
        self.listWidget.setObjectName("listWidget")
        self.standart_deviation_output = QtWidgets.QLineEdit(Dialog)
        self.standart_deviation_output.setGeometry(QtCore.QRect(480, 140, 113, 31))
        self.standart_deviation_output.setObjectName("standart_deviation_output")
        self.skewness_output = QtWidgets.QLineEdit(Dialog)
        self.skewness_output.setGeometry(QtCore.QRect(480, 189, 113, 31))
        self.skewness_output.setObjectName("skewness_output")
        self.kurtosis_output = QtWidgets.QLineEdit(Dialog)
        self.kurtosis_output.setGeometry(QtCore.QRect(480, 239, 113, 31))
        self.kurtosis_output.setObjectName("kurtosis_output")
        self.file_import = QtWidgets.QPushButton(Dialog)
        self.file_import.setGeometry(QtCore.QRect(230, 70, 75, 41))
        self.file_import.setObjectName("file_import")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(180, 80, 47, 13))
        self.label_4.setObjectName("label_4")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        y = []

        def Add_is_clicked():
            values = self.lineEdit.text()
            self.listWidget.addItem(values+'\n')
            y.append(values)

        def Remove_Selected_is_clicked():
            i = self.listWidget.currentRow()
            y.pop(i)
            for item in self.listWidget.selectedItems():
                self.listWidget.takeItem(self.listWidget.row(item))

        def Remove_All_is_clicked():
            self.listWidget.clear()
            y.clear()

        def Plot_is_clicked():
            y1 = [float(i) for i in y]
            plt.plot(list(range(0, len(y1))), (y1))
            plt.show()
            
        def Histogram_is_clicked():
            x=np.asfarray(y,float)
            max_value=np.max(x)
            min_value=np.min(x)
            number_of_bins = round((max_value-min_value)*pow(len(x),1/3)/(3.49*statistics.stdev(x)))
            bin_width = abs((max_value-min_value)/number_of_bins)
            plt.hist(x, bins=number_of_bins, width = bin_width, color='#0504aa',alpha=0.7)
            plt.grid(axis='y', alpha=0.75)
            plt.xlabel('Value',fontsize=15)
            plt.ylabel('Frequency',fontsize=15)
            plt.xticks(fontsize=15)
            plt.yticks(fontsize=15)
            plt.ylabel('Frequency',fontsize=15)
            plt.title('Normal Distribution Histogram',fontsize=15)
            plt.show()

        def Standard_Deviation_is_clicked():
            for i in range(0, len(y)):
                y[i] = float(y[i])
            standard_deviation = (statistics.stdev(y))
            self.standart_deviation_output.setText(str(standard_deviation))

        def Skewness_is_clicked():
            for i in range(0, len(y)):
                y[i] = float(y[i])
            standard_deviation = (statistics.stdev(y))
            number_of_data = len(y)
            arithmetic_mean = sum(y) / number_of_data
            if number_of_data % 2 == 1:
                median = sorted(y)[number_of_data // 2]
            else:
                i = number_of_data // 2
                median = (sorted(y)[i - 1] + sorted(y)[i]) / 2
            skewness = 3 * (arithmetic_mean - median) / standard_deviation
            self.skewness_output.setText(str(skewness))

        def Kurtosis_is_clicked():
            for i in range(0, len(y)):
                y[i] = float(y[i])
            standard_deviation = (statistics.stdev(y))
            m4 = stats.moment(y, moment=4)
            kurtosis = m4 / standard_deviation ** 4
            self.kurtosis_output.setText(str(kurtosis))

        def Everything_is_clicked():
            Plot_is_clicked()
            Histogram_is_clicked()
            Standard_Deviation_is_clicked()
            Skewness_is_clicked()
            Kurtosis_is_clicked()

        def loadFileContent():
            options = QtWidgets.QFileDialog.Options()
            fileName = QtWidgets.QFileDialog.getOpenFileName(None, 'Open File', filter='Text File (*.txt);;Excel File (*.xlsx *.xls)',options=options)
            path = fileName[0]
            if path != '':
                if path.lower().endswith('.txt'):
                    f = open(path, 'r')
                    for line in f.readlines():
                        fields = line.split(' ')
                        for i in fields:
                            print(i)
                            y.append(str(i))
                            self.listWidget.addItem(y[-1])
                            f.close()
                elif path.lower().endswith('.xlsx') or fileName.endswith('xls'):
                    excel_data=pd.read_excel(path,sheet_name=get_sheet_name())
                    column_list = excel_data[get_column_name()].tolist()
                    for i in column_list:
                        self.listWidget.addItem(str(i)+'\n')
                        y.append(str(i))
            else:
                pass      
             
        def get_sheet_name():
            text, okPressed = QInputDialog.getText(None, "Get text","Sheet name:", QLineEdit.Normal, "")
            return text

        def get_column_name():
            text, okPressed = QInputDialog.getText(None, "Get text","Column name:", QLineEdit.Normal, "")
            return text
           
            
        
        self.Add.clicked.connect(Add_is_clicked)
        self.Remove_Selected.clicked.connect(Remove_Selected_is_clicked)
        self.Remove_All.clicked.connect(Remove_All_is_clicked)
        self.Histogram.clicked.connect(Histogram_is_clicked)
        self.Standard_Deviation.clicked.connect(Standard_Deviation_is_clicked)
        self.Kurtosis.clicked.connect(Kurtosis_is_clicked)
        self.Skewness.clicked.connect(Skewness_is_clicked)
        self.Everything.clicked.connect(Everything_is_clicked)
        self.Plot.clicked.connect(Plot_is_clicked)
        self.file_import.clicked.connect(loadFileContent)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Statistical Calculator"))
        self.Add.setText(_translate("Dialog", "Add"))
        self.label.setText(_translate("Dialog", "Values :"))
        self.label_2.setText(_translate("Dialog", "Show :"))
        self.label_3.setText(_translate("Dialog", "Entered Values:"))
        self.Remove_Selected.setText(_translate("Dialog", "Remove \n"
                                                          "Selected"))
        self.Plot.setText(_translate("Dialog", "Plot"))
        self.Standard_Deviation.setText(_translate("Dialog", "Standard \n"
                                                             "Deviation"))
        self.Histogram.setText(_translate("Dialog", "Histogram"))
        self.Kurtosis.setText(_translate("Dialog", "Kurtosis"))
        self.Skewness.setText(_translate("Dialog", "Skewness"))
        self.Everything.setText(_translate("Dialog", "Everything"))
        self.Remove_All.setText(_translate("Dialog", "Remove All"))
        self.file_import.setText(_translate("Dialog", "Import"))
        self.label_4.setText(_translate("Dialog", "Or"))
